"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = Icon;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _IconText = _interopRequireDefault(require("./IconText"));

var _Element = _interopRequireDefault(require("../Element"));

var _excluded = ["align", "children", "className", "color", "size"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var colors = ['white', 'black', 'light', 'dark', 'primary', 'link', 'info', 'success', 'warning', 'danger', 'black-bis', 'black-ter', 'grey-dark', 'grey', 'grey-light', 'grey-lighter', 'white-ter', 'white-bis', 'primary-light', 'link-light', 'info-light', 'success-light', 'warning-light', 'danger-light', 'primary-dark', 'link-dark', 'info-dark', 'success-dark', 'warning-dark', 'danger-dark'];
var sizes = ['small', 'medium', 'large'];
var sizeMap = {
  small: 'is-small',
  medium: 'is-medium',
  large: 'is-large'
};
var aligns = ['left', 'right'];
var alignMap = {
  left: 'is-left',
  right: 'is-right'
};

function Icon(_ref) {
  var align = _ref.align,
      children = _ref.children,
      className = _ref.className,
      color = _ref.color,
      size = _ref.size,
      props = _objectWithoutProperties(_ref, _excluded);

  var isSize = size && sizeMap[size];
  var isAlign = align && alignMap[align];
  var classes = (0, _classnames["default"])('icon', className, isSize, isAlign);
  return /*#__PURE__*/_react["default"].createElement(_Element["default"], _extends({
    className: classes
  }, props, {
    textColor: color
  }), children);
}

Icon.Text = _IconText["default"];
Icon.propTypes = {
  className: _propTypes["default"].string,
  children: _propTypes["default"].node,
  component: _propTypes["default"].elementType,
  color: _propTypes["default"].oneOfType([_propTypes["default"].oneOf(colors), _propTypes["default"].string]),
  size: _propTypes["default"].oneOf(sizes),
  align: _propTypes["default"].oneOf(aligns)
};
Icon.defaultProps = {
  className: undefined,
  children: null,
  component: 'span',
  color: undefined,
  size: undefined,
  align: undefined
};