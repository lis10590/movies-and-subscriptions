"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = Tile;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _Element = _interopRequireDefault(require("../Element"));

var _excluded = ["box", "children", "className", "color", "light", "type", "vertical", "size"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var types = ['ancestor', 'parent', 'child'];
var typeMap = {
  ancestor: 'is-ancestor',
  parent: 'is-parent',
  child: 'is-child'
};
var colors = ['primary', 'link', 'info', 'success', 'warning', 'danger', 'white', 'black', 'light', 'dark'];
var colorMap = {
  primary: 'is-primary',
  link: 'is-link',
  info: 'is-info',
  success: 'is-success',
  warning: 'is-warning',
  danger: 'is-danger',
  white: 'is-white',
  black: 'is-black',
  light: 'is-light',
  dark: 'is-dark'
};
var sizes = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'];
var sizeMap = {};
sizes.forEach(function (size) {
  sizeMap[size] = "is-".concat(size);
});

function Tile(_ref) {
  var box = _ref.box,
      children = _ref.children,
      className = _ref.className,
      color = _ref.color,
      light = _ref.light,
      type = _ref.type,
      vertical = _ref.vertical,
      size = _ref.size,
      props = _objectWithoutProperties(_ref, _excluded);

  var isType = type && typeMap[type];
  var isColor = color && colorMap[color];
  var isSize = size && sizeMap[size];
  var classes = (0, _classnames["default"])('tile', className, isType, isColor, isSize, {
    notification: color,
    'is-light': light,
    'is-vertical': vertical,
    box: box
  });
  return /*#__PURE__*/_react["default"].createElement(_Element["default"], _extends({
    className: classes
  }, props), children);
}

Tile.propTypes = {
  className: _propTypes["default"].string,
  children: _propTypes["default"].node,
  component: _propTypes["default"].elementType,
  type: _propTypes["default"].oneOf(types),
  size: _propTypes["default"].oneOf(sizes),
  color: _propTypes["default"].oneOf(colors),
  light: _propTypes["default"].bool,
  vertical: _propTypes["default"].bool,
  box: _propTypes["default"].bool
};
Tile.defaultProps = {
  className: undefined,
  children: null,
  component: 'div',
  type: undefined,
  size: undefined,
  color: undefined,
  light: false,
  vertical: false,
  box: false
};