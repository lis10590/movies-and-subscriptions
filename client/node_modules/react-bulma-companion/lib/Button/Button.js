"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = Button;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _Element = _interopRequireDefault(require("../Element"));

var _excluded = ["active", "children", "className", "color", "focused", "fullwidth", "hovered", "inverted", "light", "loading", "outlined", "responsive", "rounded", "selected", "size"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var colors = ['primary', 'link', 'info', 'success', 'warning', 'danger', 'white', 'black', 'light', 'dark', 'text', 'ghost'];
var colorMap = {};
colors.forEach(function (color) {
  colorMap[color] = "is-".concat(color);
});
var sizes = ['small', 'normal', 'medium', 'large'];
var sizeMap = {
  small: 'is-small',
  normal: 'is-normal',
  medium: 'is-medium',
  large: 'is-large'
};

function Button(_ref) {
  var active = _ref.active,
      children = _ref.children,
      className = _ref.className,
      color = _ref.color,
      focused = _ref.focused,
      fullwidth = _ref.fullwidth,
      hovered = _ref.hovered,
      inverted = _ref.inverted,
      light = _ref.light,
      loading = _ref.loading,
      outlined = _ref.outlined,
      responsive = _ref.responsive,
      rounded = _ref.rounded,
      selected = _ref.selected,
      size = _ref.size,
      props = _objectWithoutProperties(_ref, _excluded);

  var isColor = color && colorMap[color];
  var isSize = size && sizeMap[size];
  var classes = (0, _classnames["default"])('button', className, isColor, isSize, {
    'is-light': light,
    'is-responsive': responsive,
    'is-fullwidth': fullwidth,
    'is-outlined': outlined,
    'is-inverted': inverted,
    'is-rounded': rounded,
    'is-hovered': hovered,
    'is-focused': focused,
    'is-active': active,
    'is-selected': selected,
    'is-loading': loading,
    'is-static': props["static"]
  }); // eslint-disable-next-line

  delete props["static"];
  return /*#__PURE__*/_react["default"].createElement(_Element["default"], _extends({
    className: classes
  }, props), children);
}

Button.propTypes = {
  className: _propTypes["default"].string,
  children: _propTypes["default"].node,
  component: _propTypes["default"].elementType,
  type: _propTypes["default"].oneOf(['button', 'submit', 'reset']),
  color: _propTypes["default"].oneOf(colors),
  light: _propTypes["default"].bool,
  size: _propTypes["default"].oneOf(sizes),
  responsive: _propTypes["default"].bool,
  fullwidth: _propTypes["default"].bool,
  outlined: _propTypes["default"].bool,
  inverted: _propTypes["default"].bool,
  rounded: _propTypes["default"].bool,
  hovered: _propTypes["default"].bool,
  focused: _propTypes["default"].bool,
  active: _propTypes["default"].bool,
  selected: _propTypes["default"].bool,
  loading: _propTypes["default"].bool,
  "static": _propTypes["default"].bool,
  disabled: _propTypes["default"].bool
};
Button.defaultProps = {
  className: undefined,
  children: null,
  component: 'button',
  type: 'button',
  color: undefined,
  light: false,
  size: undefined,
  responsive: false,
  fullwidth: false,
  outlined: false,
  inverted: false,
  rounded: false,
  hovered: false,
  focused: false,
  active: false,
  selected: false,
  loading: false,
  "static": false,
  disabled: false
};