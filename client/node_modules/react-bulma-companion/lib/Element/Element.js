"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = Element;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _excluded = ["alignContent", "alignItems", "alignSelf", "backgroundColor", "children", "className", "clearfix", "clickable", "clipped", "component", "desktop", "display", "domRef", "flexDirection", "flexGrow", "flexShrink", "flexWrap", "font", "fullhd", "hidden", "invisible", "italic", "justifyContent", "margin", "marginBottom", "marginHorizontal", "marginLeft", "marginRight", "marginTop", "marginVertical", "mobile", "overlay", "padding", "paddingBottom", "paddingHorizontal", "paddingLeft", "paddingRight", "paddingTop", "paddingVertical", "pull", "radiusless", "relative", "screenReaderOnly", "shadowless", "tablet", "textAlign", "textColor", "textSize", "textTransform", "textWeight", "touch", "underlined", "unselectable", "widescreen"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

// Colors
var colors = ['white', 'black', 'light', 'dark', 'primary', 'link', 'info', 'success', 'warning', 'danger', 'black-bis', 'black-ter', 'grey-darker', 'grey-dark', 'grey', 'grey-light', 'grey-lighter', 'white-ter', 'white-bis', 'primary-light', 'link-light', 'info-light', 'success-light', 'warning-light', 'danger-light', 'primary-dark', 'link-dark', 'info-dark', 'success-dark', 'warning-dark', 'danger-dark']; // Spacing

var spacings = ['0', '1', '2', '3', '4', '5', '6', 'auto']; // Typography

var textSizes = ['1', '2', '3', '4', '5', '6', '7'];
var textSizeMap = {
  1: 'is-size-1',
  2: 'is-size-2',
  3: 'is-size-3',
  4: 'is-size-4',
  5: 'is-size-5',
  6: 'is-size-6',
  7: 'is-size-7'
};
var textAligns = ['center', 'justify', 'left', 'right'];
var textAlignMap = {
  center: 'has-text-centered',
  justify: 'has-text-justified',
  left: 'has-text-left',
  right: 'has-text-right'
};
var textTransforms = ['capitalize', 'lowercase', 'uppercase', 'italic', 'underline'];
var textTransformMap = {
  capitalize: 'is-capitalized',
  lowercase: 'is-lowercase',
  uppercase: 'is-uppercase',
  italic: 'is-italic',
  underline: 'is-underlined'
};
var textWeights = ['light', 'normal', 'medium', 'semibold', 'bold'];
var textWeightMap = {
  light: 'has-text-weight-light',
  normal: 'has-text-weight-normal',
  medium: 'has-text-weight-medium',
  semibold: 'has-text-weight-semibold',
  bold: 'has-text-weight-bold'
};
var fonts = ['sans-serif', 'monospace', 'primary', 'secondary', 'code'];
var fontMap = {
  'sans-serif': 'is-family-sans-serif',
  monospace: 'is-family-monospace',
  primary: 'is-family-primary',
  secondary: 'is-family-secondary',
  code: 'is-family-code'
}; // Visibility

var displays = ['block', 'flex', 'inline', 'inline-block', 'inline-flex'];
var displayMap = {
  block: 'is-block',
  flex: 'is-flex',
  inline: 'is-inline',
  'inline-block': 'is-inline-block',
  'inline-flex': 'is-inline-flex'
}; // Flex

var flexDirections = ['row', 'row-reverse', 'column', 'column-reverse'];
var flexDirectionMap = {
  row: 'is-flex-direction-row',
  'row-reverse': 'is-flex-direction-row-reverse',
  column: 'is-flex-direction-column',
  'column-reverse': 'is-flex-direction-column-reverse'
};
var flexWraps = ['nowrap', 'wrap', 'wrap-reverse'];
var flexWrapMap = {
  nowrap: 'is-flex-wrap-nowrap',
  wrap: 'is-flex-wrap-wrap',
  'wrap-reverse': 'is-flex-wrap-wrap-reverse'
};
var justifyContents = ['flex-start', 'flex-end', 'center', 'space-between', 'space-around', 'space-evenly', 'start', 'end', 'left', 'right'];
var justifyContentMap = {
  'flex-start': 'is-justify-content-flex-start',
  'flex-end': 'is-justify-content-flex-end',
  center: 'is-justify-content-center',
  'space-between': 'is-justify-content-space-between',
  'space-around': 'is-justify-content-space-around',
  'space-evenly': 'is-justify-content-space-evenly',
  start: 'is-justify-content-start',
  end: 'is-justify-content-end',
  left: 'is-justify-content-left',
  right: 'is-justify-content-right'
};
var alignContents = ['flex-start', 'flex-end', 'center', 'space-between', 'space-around', 'space-evenly', 'stretch', 'start', 'end', 'baseline'];
var alignContentMap = {
  'flex-start': 'is-align-content-flex-start',
  'flex-end': 'is-align-content-flex-end',
  center: 'is-align-content-center',
  'space-between': 'is-align-content-space-between',
  'space-around': 'is-align-content-space-around',
  'space-evenly': 'is-align-content-space-evenly',
  stretch: 'is-align-content-stretch',
  start: 'is-align-content-start',
  end: 'is-align-content-end',
  baseline: 'is-align-content-baseline'
};
var alignItemses = ['stretch', 'flex-start', 'flex-end', 'center', 'baseline', 'start', 'end', 'self-start', 'self-end'];
var alignItemsMap = {
  stretch: 'is-align-items-stretch',
  'flex-start': 'is-align-items-flex-start',
  'flex-end': 'is-align-items-flex-end',
  center: 'is-align-items-center',
  baseline: 'is-align-items-baseline',
  start: 'is-align-items-start',
  end: 'is-align-items-end',
  'self-start': 'is-align-items-self-start',
  'self-end': 'is-align-items-self-end'
};
var alignSelfs = ['auto', 'flex-start', 'flex-end', 'center', 'baseline', 'stretch'];
var alignSelfMap = {
  auto: 'is-align-self-auto',
  'flex-start': 'is-align-self-flex-start',
  'flex-end': 'is-align-self-flex-end',
  center: 'is-align-self-center',
  baseline: 'is-align-self-baseline',
  stretch: 'is-align-self-stretch'
};
var flexSizes = ['0', '1', '2', '3', '4', '5'];
var flexGrowMap = {};
var flexShrinkMap = {};
flexSizes.forEach(function (size) {
  flexGrowMap[size] = "is-flex-grow-".concat(size);
  flexShrinkMap[size] = "is-flex-shrink-".concat(size);
});

function Element(_ref) {
  var _classNames;

  var alignContent = _ref.alignContent,
      alignItems = _ref.alignItems,
      alignSelf = _ref.alignSelf,
      backgroundColor = _ref.backgroundColor,
      children = _ref.children,
      className = _ref.className,
      clearfix = _ref.clearfix,
      clickable = _ref.clickable,
      clipped = _ref.clipped,
      component = _ref.component,
      desktop = _ref.desktop,
      display = _ref.display,
      domRef = _ref.domRef,
      flexDirection = _ref.flexDirection,
      flexGrow = _ref.flexGrow,
      flexShrink = _ref.flexShrink,
      flexWrap = _ref.flexWrap,
      font = _ref.font,
      fullhd = _ref.fullhd,
      hidden = _ref.hidden,
      invisible = _ref.invisible,
      italic = _ref.italic,
      justifyContent = _ref.justifyContent,
      margin = _ref.margin,
      marginBottom = _ref.marginBottom,
      marginHorizontal = _ref.marginHorizontal,
      marginLeft = _ref.marginLeft,
      marginRight = _ref.marginRight,
      marginTop = _ref.marginTop,
      marginVertical = _ref.marginVertical,
      mobile = _ref.mobile,
      overlay = _ref.overlay,
      padding = _ref.padding,
      paddingBottom = _ref.paddingBottom,
      paddingHorizontal = _ref.paddingHorizontal,
      paddingLeft = _ref.paddingLeft,
      paddingRight = _ref.paddingRight,
      paddingTop = _ref.paddingTop,
      paddingVertical = _ref.paddingVertical,
      pull = _ref.pull,
      radiusless = _ref.radiusless,
      relative = _ref.relative,
      screenReaderOnly = _ref.screenReaderOnly,
      shadowless = _ref.shadowless,
      tablet = _ref.tablet,
      textAlign = _ref.textAlign,
      textColor = _ref.textColor,
      textSize = _ref.textSize,
      textTransform = _ref.textTransform,
      textWeight = _ref.textWeight,
      touch = _ref.touch,
      underlined = _ref.underlined,
      unselectable = _ref.unselectable,
      widescreen = _ref.widescreen,
      props = _objectWithoutProperties(_ref, _excluded);

  var Element = component;
  var isTextSize = textSize && textSizeMap[textSize];
  var isTextAlign = textAlign && textAlignMap[textAlign];
  var isTextTransform = textTransform && textTransformMap[textTransform];
  var hasTextWeight = textWeight && textWeightMap[textWeight];
  var isFont = font && fontMap[font];
  var isDisplay = display && displayMap[display];
  var isFlexDirection = flexDirection && flexDirectionMap[flexDirection];
  var isFlexWrap = flexWrap && flexWrapMap[flexWrap];
  var isJustifyContent = justifyContent && justifyContentMap[justifyContent];
  var isAlignContent = alignContent && alignContentMap[alignContent];
  var isAlignItems = alignItems && alignItemsMap[alignItems];
  var isAlignSelf = alignSelf && alignSelfMap[alignSelf];
  var isFlexGrow = flexGrow && flexGrowMap[flexGrow];
  var isFlexShrink = flexShrink && flexShrinkMap[flexShrink];
  var classes = (0, _classnames["default"])(className, isTextSize, isTextAlign, isTextTransform, hasTextWeight, isFont, isDisplay, isFlexDirection, isFlexWrap, isJustifyContent, isAlignContent, isAlignItems, isAlignSelf, isFlexGrow, isFlexShrink, (_classNames = {}, _defineProperty(_classNames, "has-background-".concat(backgroundColor), !!backgroundColor), _defineProperty(_classNames, "has-text-".concat(textColor), !!textColor), _defineProperty(_classNames, "m-".concat(margin), !!margin), _defineProperty(_classNames, "mt-".concat(marginTop), !!marginTop), _defineProperty(_classNames, "mr-".concat(marginRight), !!marginRight), _defineProperty(_classNames, "mb-".concat(marginBottom), !!marginBottom), _defineProperty(_classNames, "ml-".concat(marginLeft), !!marginLeft), _defineProperty(_classNames, "mx-".concat(marginHorizontal), !!marginHorizontal), _defineProperty(_classNames, "my-".concat(marginVertical), !!marginVertical), _defineProperty(_classNames, "p-".concat(padding), !!padding), _defineProperty(_classNames, "pt-".concat(paddingTop), !!paddingTop), _defineProperty(_classNames, "pr-".concat(paddingRight), !!paddingRight), _defineProperty(_classNames, "pb-".concat(paddingBottom), !!paddingBottom), _defineProperty(_classNames, "pl-".concat(paddingLeft), !!paddingLeft), _defineProperty(_classNames, "px-".concat(paddingHorizontal), !!paddingHorizontal), _defineProperty(_classNames, "py-".concat(paddingVertical), !!paddingVertical), _defineProperty(_classNames, "is-size-".concat(mobile.textSize, "-mobile"), !!mobile.textSize && textSizes.includes(mobile.textSize)), _defineProperty(_classNames, "is-size-".concat(touch.textSize, "-touch"), !!touch.textSize && textSizes.includes(touch.textSize)), _defineProperty(_classNames, "is-size-".concat(tablet.textSize, "-tablet"), !!tablet.textSize && textSizes.includes(tablet.textSize)), _defineProperty(_classNames, "is-size-".concat(desktop.textSize, "-desktop"), !!desktop.textSize && textSizes.includes(desktop.textSize)), _defineProperty(_classNames, "is-size-".concat(widescreen.textSize, "-widescreen"), !!widescreen.textSize && textSizes.includes(widescreen.textSize)), _defineProperty(_classNames, "is-size-".concat(fullhd.textSize, "-fullhd"), !!fullhd.textSize && textSizes.includes(fullhd.textSize)), _defineProperty(_classNames, "".concat(textAlignMap[mobile.textAlign], "-mobile"), !!mobile.textAlign && textAligns.includes(mobile.textAlign)), _defineProperty(_classNames, "".concat(textAlignMap[touch.textAlign], "-touch"), !!touch.textAlign && textAligns.includes(touch.textAlign)), _defineProperty(_classNames, "".concat(textAlignMap[tablet.textAlign], "-tablet-only"), !!tablet.textAlign && tablet.only && textAligns.includes(tablet.textAlign)), _defineProperty(_classNames, "".concat(textAlignMap[tablet.textAlign], "-tablet"), !!tablet.textAlign && !tablet.only && textAligns.includes(tablet.textAlign)), _defineProperty(_classNames, "".concat(textAlignMap[desktop.textAlign], "-desktop-only"), !!desktop.textAlign && desktop.only && textAligns.includes(desktop.textAlign)), _defineProperty(_classNames, "".concat(textAlignMap[desktop.textAlign], "-desktop"), !!desktop.textAlign && !desktop.only && textAligns.includes(desktop.textAlign)), _defineProperty(_classNames, "".concat(textAlignMap[widescreen.textAlign], "-widescreen-only"), !!widescreen.textAlign && widescreen.only && textAligns.includes(widescreen.textAlign)), _defineProperty(_classNames, "".concat(textAlignMap[widescreen.textAlign], "-widescreen"), !!widescreen.textAlign && !widescreen.only && textAligns.includes(widescreen.textAlign)), _defineProperty(_classNames, "".concat(textAlignMap[fullhd.textAlign], "-fullhd"), !!fullhd.textAlign && textAligns.includes(fullhd.textAlign)), _defineProperty(_classNames, "".concat(displayMap[mobile.display], "-mobile"), !!mobile.display && displays.includes(mobile.display)), _defineProperty(_classNames, "".concat(displayMap[touch.display], "-touch"), !!touch.display && displays.includes(touch.display)), _defineProperty(_classNames, "".concat(displayMap[tablet.display], "-tablet-only"), !!tablet.display && tablet.only && displays.includes(tablet.display)), _defineProperty(_classNames, "".concat(displayMap[tablet.display], "-tablet"), !!tablet.display && !tablet.only && displays.includes(tablet.display)), _defineProperty(_classNames, "".concat(displayMap[desktop.display], "-desktop-only"), !!desktop.display && desktop.only && displays.includes(desktop.display)), _defineProperty(_classNames, "".concat(displayMap[desktop.display], "-desktop"), !!desktop.display && !desktop.only && displays.includes(desktop.display)), _defineProperty(_classNames, "".concat(displayMap[widescreen.display], "-widescreen-only"), !!widescreen.display && widescreen.only && displays.includes(widescreen.display)), _defineProperty(_classNames, "".concat(displayMap[widescreen.display], "-widescreen"), !!widescreen.display && !widescreen.only && displays.includes(widescreen.display)), _defineProperty(_classNames, "".concat(displayMap[fullhd.display], "-fullhd"), !!fullhd.display && displays.includes(fullhd.display)), _defineProperty(_classNames, 'is-hidden-mobile', mobile.hidden), _defineProperty(_classNames, 'is-hidden-touch', touch.hidden), _defineProperty(_classNames, 'is-hidden-tablet-only', tablet.hidden && tablet.only), _defineProperty(_classNames, 'is-hidden-tablet', tablet.hidden && !tablet.only), _defineProperty(_classNames, 'is-hidden-desktop-only', desktop.hidden && desktop.only), _defineProperty(_classNames, 'is-hidden-desktop', desktop.hidden && !desktop.only), _defineProperty(_classNames, 'is-hidden-widescreen-only', widescreen.hidden && widescreen.only), _defineProperty(_classNames, 'is-hidden-widescreen', widescreen.hidden && !widescreen.only), _defineProperty(_classNames, 'is-hidden-fullhd', fullhd.hidden), _defineProperty(_classNames, 'is-italic', italic), _defineProperty(_classNames, 'is-underlined', underlined), _defineProperty(_classNames, 'is-invisible', invisible), _defineProperty(_classNames, 'is-hidden', hidden), _defineProperty(_classNames, 'is-sr-only', screenReaderOnly), _defineProperty(_classNames, 'is-pulled-left', pull === 'left'), _defineProperty(_classNames, 'is-pulled-right', pull === 'right'), _defineProperty(_classNames, 'is-clearfix', clearfix), _defineProperty(_classNames, 'is-overlay', overlay), _defineProperty(_classNames, 'is-clipped', clipped), _defineProperty(_classNames, 'is-radiusless', radiusless), _defineProperty(_classNames, 'is-shadowless', shadowless), _defineProperty(_classNames, 'is-unselectable', unselectable), _defineProperty(_classNames, 'is-clickable', clickable), _defineProperty(_classNames, 'is-relative', relative), _classNames));
  return /*#__PURE__*/_react["default"].createElement(Element, _extends({
    ref: domRef,
    className: classes
  }, props), children);
}

Element.propTypes = {
  className: _propTypes["default"].string,
  children: _propTypes["default"].node,
  component: _propTypes["default"].elementType,
  domRef: _propTypes["default"].object,
  backgroundColor: _propTypes["default"].oneOfType([_propTypes["default"].oneOf(colors), _propTypes["default"].string]),
  textColor: _propTypes["default"].oneOfType([_propTypes["default"].oneOf(colors), _propTypes["default"].string]),
  textSize: _propTypes["default"].oneOf(textSizes),
  textAlign: _propTypes["default"].oneOf(textAligns),
  textTransform: _propTypes["default"].oneOf(textTransforms),
  textWeight: _propTypes["default"].oneOf(textWeights),
  font: _propTypes["default"].oneOf(fonts),
  italic: _propTypes["default"].bool,
  underlined: _propTypes["default"].bool,
  display: _propTypes["default"].oneOf(displays),
  invisible: _propTypes["default"].bool,
  hidden: _propTypes["default"].bool,
  screenReaderOnly: _propTypes["default"].bool,
  flexDirection: _propTypes["default"].oneOf(flexDirections),
  flexWrap: _propTypes["default"].oneOf(flexWraps),
  justifyContent: _propTypes["default"].oneOf(justifyContents),
  alignContent: _propTypes["default"].oneOf(alignContents),
  alignItems: _propTypes["default"].oneOf(alignItemses),
  alignSelf: _propTypes["default"].oneOf(alignSelfs),
  flexGrow: _propTypes["default"].oneOf(flexSizes),
  flexShrink: _propTypes["default"].oneOf(flexSizes),
  pull: _propTypes["default"].oneOf(['left', 'right']),
  clearfix: _propTypes["default"].bool,
  overlay: _propTypes["default"].bool,
  clipped: _propTypes["default"].bool,
  radiusless: _propTypes["default"].bool,
  shadowless: _propTypes["default"].bool,
  unselectable: _propTypes["default"].bool,
  clickable: _propTypes["default"].bool,
  relative: _propTypes["default"].bool,
  margin: _propTypes["default"].oneOfType([_propTypes["default"].oneOf(spacings), _propTypes["default"].string, _propTypes["default"].number]),
  marginTop: _propTypes["default"].oneOfType([_propTypes["default"].oneOf(spacings), _propTypes["default"].string, _propTypes["default"].number]),
  marginRight: _propTypes["default"].oneOfType([_propTypes["default"].oneOf(spacings), _propTypes["default"].string, _propTypes["default"].number]),
  marginBottom: _propTypes["default"].oneOfType([_propTypes["default"].oneOf(spacings), _propTypes["default"].string, _propTypes["default"].number]),
  marginLeft: _propTypes["default"].oneOfType([_propTypes["default"].oneOf(spacings), _propTypes["default"].string, _propTypes["default"].number]),
  marginHorizontal: _propTypes["default"].oneOfType([_propTypes["default"].oneOf(spacings), _propTypes["default"].string, _propTypes["default"].number]),
  marginVertical: _propTypes["default"].oneOfType([_propTypes["default"].oneOf(spacings), _propTypes["default"].string, _propTypes["default"].number]),
  padding: _propTypes["default"].oneOfType([_propTypes["default"].oneOf(spacings), _propTypes["default"].string, _propTypes["default"].number]),
  paddingTop: _propTypes["default"].oneOfType([_propTypes["default"].oneOf(spacings), _propTypes["default"].string, _propTypes["default"].number]),
  paddingRight: _propTypes["default"].oneOfType([_propTypes["default"].oneOf(spacings), _propTypes["default"].string, _propTypes["default"].number]),
  paddingBottom: _propTypes["default"].oneOfType([_propTypes["default"].oneOf(spacings), _propTypes["default"].string, _propTypes["default"].number]),
  paddingLeft: _propTypes["default"].oneOfType([_propTypes["default"].oneOf(spacings), _propTypes["default"].string, _propTypes["default"].number]),
  paddingHorizontal: _propTypes["default"].oneOfType([_propTypes["default"].oneOf(spacings), _propTypes["default"].string, _propTypes["default"].number]),
  paddingVertical: _propTypes["default"].oneOfType([_propTypes["default"].oneOf(spacings), _propTypes["default"].string, _propTypes["default"].number]),
  mobile: _propTypes["default"].shape({
    textSize: _propTypes["default"].oneOf(textSizes),
    textAlign: _propTypes["default"].oneOf(textAligns),
    display: _propTypes["default"].oneOf(displays),
    hidden: _propTypes["default"].bool
  }),
  touch: _propTypes["default"].shape({
    textSize: _propTypes["default"].oneOf(textSizes),
    textAlign: _propTypes["default"].oneOf(textAligns),
    display: _propTypes["default"].oneOf(displays),
    hidden: _propTypes["default"].bool
  }),
  tablet: _propTypes["default"].shape({
    textSize: _propTypes["default"].oneOf(textSizes),
    textAlign: _propTypes["default"].oneOf(textAligns),
    display: _propTypes["default"].oneOf(displays),
    hidden: _propTypes["default"].bool,
    only: _propTypes["default"].bool
  }),
  desktop: _propTypes["default"].shape({
    textSize: _propTypes["default"].oneOf(textSizes),
    textAlign: _propTypes["default"].oneOf(textAligns),
    display: _propTypes["default"].oneOf(displays),
    hidden: _propTypes["default"].bool,
    only: _propTypes["default"].bool
  }),
  widescreen: _propTypes["default"].shape({
    textSize: _propTypes["default"].oneOf(textSizes),
    textAlign: _propTypes["default"].oneOf(textAligns),
    display: _propTypes["default"].oneOf(displays),
    hidden: _propTypes["default"].bool,
    only: _propTypes["default"].bool
  }),
  fullhd: _propTypes["default"].shape({
    textSize: _propTypes["default"].oneOf(textSizes),
    textAlign: _propTypes["default"].oneOf(textAligns),
    display: _propTypes["default"].oneOf(displays),
    hidden: _propTypes["default"].bool
  })
};
Element.defaultProps = {
  className: undefined,
  children: null,
  component: 'div',
  domRef: undefined,
  backgroundColor: undefined,
  textColor: undefined,
  textSize: undefined,
  textAlign: undefined,
  textTransform: undefined,
  textWeight: undefined,
  font: undefined,
  italic: false,
  underlined: false,
  display: undefined,
  invisible: false,
  hidden: false,
  screenReaderOnly: false,
  flexDirection: undefined,
  flexWrap: undefined,
  justifyContent: undefined,
  alignContent: undefined,
  alignItems: undefined,
  alignSelf: undefined,
  flexGrow: undefined,
  flexShrink: undefined,
  pull: undefined,
  clearfix: false,
  overlay: false,
  clipped: false,
  radiusless: false,
  shadowless: false,
  unselectable: false,
  clickable: false,
  relative: false,
  margin: undefined,
  marginTop: undefined,
  marginRight: undefined,
  marginBottom: undefined,
  marginLeft: undefined,
  marginHorizontal: undefined,
  marginVertical: undefined,
  padding: undefined,
  paddingTop: undefined,
  paddingRight: undefined,
  paddingBottom: undefined,
  paddingLeft: undefined,
  paddingHorizontal: undefined,
  paddingVertical: undefined,
  mobile: {},
  touch: {},
  tablet: {},
  desktop: {},
  widescreen: {},
  fullhd: {}
};